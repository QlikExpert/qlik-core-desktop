var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define(["require", "exports", "jquery", "translator", "autogenerated/qix/engine-enums", "objects/adapters/calc-cond-adapter", "objects.error-handling/error-translation", "./MapStandardErrors"], function (require, exports, jquery_1, translator_1, engine_enums_1, calc_cond_adapter_1, error_translation_1, MapStandardErrors_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    jquery_1 = __importDefault(jquery_1);
    translator_1 = __importDefault(translator_1);
    engine_enums_1 = __importDefault(engine_enums_1);
    calc_cond_adapter_1 = __importDefault(calc_cond_adapter_1);
    error_translation_1 = __importDefault(error_translation_1);
    MapStandardErrors_1 = __importDefault(MapStandardErrors_1);
    /**
     * Contains logic for handling and displaying erros and warnigns that the user need to be aware of.
     * It work with defined errors in MapStandardErrors. The type of error decieds how it should be displayed for the user.
     * To be able to work it need to be associated with a MapChart that it use to display the errors on.
     */
    var ErrorHandler = /** @class */ (function () {
        function ErrorHandler(mapChart) {
            var _this = this;
            this.ready = false;
            this.mapChart = mapChart;
            this.errorDiv = jquery_1.default(".map-error-div", mapChart.parentDiv).attr("id", "mapErrordiv-" + mapChart.id);
            this.contentDiv = jquery_1.default(".map-error-content-div", this.errorDiv);
            this.iconDiv = jquery_1.default(".map-error-icon-div", this.errorDiv);
            this.errorDiv.click(function () {
                _this.contentDiv.slideToggle("fast");
            });
            this.errorQueue = [];
        }
        /*
         * Use to toggle if the Map is ready to display errors or not
         */
        ErrorHandler.prototype.setMapReady = function (ready) {
            this.ready = ready;
            if (ready && this.errorQueue.length > 0) {
                this.showErrors();
            }
        };
        ErrorHandler.prototype.onStateChange = function () {
            if (this.mapChart.extensionObject.inEditState()) {
                this.showErrors();
            }
            else {
                this.errorDiv.hide();
            }
        };
        /**
         * Use this as a main way to report map chart specific errors to the user
         * If the MapChart is ready to handle errors it displays them on the map chart.
         * If not it queues them until the map is ready.
         * @param error
         */
        ErrorHandler.prototype.handleError = function (error) {
            if (error.errorLabel === MapStandardErrors_1.default.UNSUCCESFULL_LOOKUP) {
                this.handleUnsuccessFullLookups(error);
            }
            else {
                this.pushOnErrorQueue(error);
            }
            if (this.ready && this.isInEditMode()) {
                this.showErrors();
            }
        };
        ErrorHandler.prototype.pushOnErrorQueue = function (error) {
            for (var _i = 0, _a = this.errorQueue; _i < _a.length; _i++) {
                var existing = _a[_i];
                //If there already exist an error with the same label try to append the paramters to it.
                if (existing.errorLabel === error.errorLabel && existing.layer === error.layer) {
                    if (existing.parameters && error.parameters) {
                        existing.parameters = existing.parameters.concat(error.parameters);
                        return true;
                    }
                    else {
                        return true;
                    }
                }
            }
            this.errorQueue.push(error);
            return true;
        };
        ErrorHandler.prototype.handleUnsuccessFullLookups = function (error) {
            //Split the parameters in ambiguous and unresolved and add two different errors.
            var unresolved = [];
            var ambiguous = [];
            if (error.parameters) {
                for (var _i = 0, _a = error.parameters; _i < _a.length; _i++) {
                    var location_1 = _a[_i];
                    if (location_1.indexOf("Unresolved:") > -1) {
                        unresolved.push(location_1.slice(12));
                    }
                    else if (location_1.indexOf("Ambiguous:") > -1) {
                        ambiguous.push(location_1.slice(11));
                    }
                    else if (location_1.length > 0) {
                        unresolved.push(location_1);
                    }
                }
            }
            if (unresolved.length > 0) {
                var unresolvedError = {
                    errorLabel: MapStandardErrors_1.default.UNSUCCESFULL_LOOKUP,
                    layer: error.layer,
                    parameters: unresolved
                };
                this.pushOnErrorQueue(unresolvedError);
            }
            if (ambiguous.length > 0) {
                var ambiguousError = {
                    errorLabel: MapStandardErrors_1.default.AMBIGUOUS_LOOKUP,
                    layer: error.layer,
                    parameters: ambiguous
                };
                this.pushOnErrorQueue(ambiguousError);
            }
        };
        ErrorHandler.prototype.isInEditMode = function () {
            if (this.mapChart.extensionObject) {
                return this.mapChart.extensionObject.inEditState();
            }
            return false;
        };
        ErrorHandler.prototype.showErrors = function () {
            this.contentDiv.empty();
            this.contentDiv.append("<p>&nbsp;</p>"); //To not overwrite the icon
            var errorLevel = 0;
            var errorsAdded = false;
            for (var _i = 0, _a = this.errorQueue; _i < _a.length; _i++) {
                var error = _a[_i];
                var currentLevel = this.getErrorLevel(error);
                var translation = "";
                if (error.parameters) {
                    var parameter = error.parameters.join(", ");
                    if (parameter.length > 200) {
                        parameter = parameter.substring(0, 200) + "...";
                    }
                    parameter = "<span class='map-error-parameters'>" + parameter + "</span>";
                    translation = translator_1.default.get(error.errorLabel, parameter);
                }
                else {
                    translation = translator_1.default.get(error.errorLabel);
                }
                errorLevel = (currentLevel > errorLevel) ? currentLevel : errorLevel;
                var layerDiv = this.getLayerDiv(error.layer);
                layerDiv.append("<p>" + translation + "</p>");
                errorsAdded = true;
            }
            if (errorLevel === 1) {
                this.iconDiv.removeClass("map-error-error");
                this.iconDiv.addClass("map-error-warning");
            }
            else if (errorLevel === 2) {
                this.iconDiv.removeClass("map-error-warning");
                this.iconDiv.addClass("map-error-error");
            }
            if (!this.errorDiv.is(":visible") && errorsAdded) {
                this.errorDiv.show();
            }
            else if (!errorsAdded) {
                this.errorDiv.hide();
            }
        };
        ErrorHandler.prototype.getErrorLevel = function (error) {
            switch (error.errorLabel) {
                case MapStandardErrors_1.default.UNSUCCESFULL_LOOKUP:
                case MapStandardErrors_1.default.LIMITED_DATA:
                    return 0;
                case MapStandardErrors_1.default.INVALID_GEOMETRY:
                    return 1;
                case MapStandardErrors_1.default.FAILED_LOOKUP:
                    return 2;
            }
            return 0;
        };
        ErrorHandler.prototype.getLayerDiv = function (layer) {
            var layerDiv = this.contentDiv.find("#error-layer-" + layer.id);
            if (layerDiv.length > 0) {
                return layerDiv;
            }
            else {
                var divName = translator_1.default.get(layer.layerName);
                var newDiv = "<div id='error-layer-" + layer.id + "' >";
                if (layer.layout && layer.layout.qHyperCube && layer.layout.qHyperCube.qDimensionInfo && layer.layout.qHyperCube.qDimensionInfo[0]) {
                    newDiv = newDiv + "<span class='map-error-layer-name'>" + layer.layout.qHyperCube.qDimensionInfo[0].qFallbackTitle + "</span>";
                }
                newDiv = newDiv + " - " + divName + "</div>";
                return jquery_1.default(newDiv).appendTo(this.contentDiv);
            }
        };
        ErrorHandler.prototype.clearErrors = function () {
            this.errorDiv.hide();
            this.contentDiv.empty();
            this.errorQueue = [];
        };
        ErrorHandler.prototype.clearqError = function (layer) {
            if (layer.legend) {
                layer.legend.setError();
            }
        };
        ErrorHandler.prototype.handleqError = function (qErrorCode, layer) {
            // Note: The map hadle only hyperCube data and not qListObjects or old map layers. Only need to check getHyperCubeError.
            var errorMessage = this.getCustomErrorMessage(layer.layout.qHyperCube) || error_translation_1.default.getHyperCubeError(qErrorCode);
            if (layer.legend) {
                if (qErrorCode === engine_enums_1.default.NxLocalizedErrorCode.LOCERR_CALC_EVAL_CONDITION_FAILED) {
                    layer.legend.setError("soft-error", errorMessage);
                }
                else {
                    layer.legend.setError("hard-error", errorMessage, translator_1.default.get("Object.Error"));
                }
            }
        };
        ErrorHandler.prototype.hasCalcConditionFailed = function (qErrorCode) {
            return qErrorCode === engine_enums_1.default.NxLocalizedErrorCode.LOCERR_CALC_EVAL_CONDITION_FAILED;
        };
        // So far it only extracts calculated condition message
        ErrorHandler.prototype.getCustomErrorMessage = function (dataEntity) {
            var errorCode = dataEntity.qError.qErrorCode;
            if (errorCode === engine_enums_1.default.NxLocalizedErrorCode.LOCERR_CALC_EVAL_CONDITION_FAILED) {
                return calc_cond_adapter_1.default.getLayoutMsg(dataEntity);
            }
            else {
                return "";
            }
        };
        /**
         * Use this to create and error event that the ErrorHandler can use.
         * Convinient way to package the label, layer and eventual parameters
         * The errorLabel decides what kind of error it is and how it will be presented.
         * It is possible to supply a number of parameters to the error message if the
         * errorLabel translation support paramters.
         * @param errorLabel An error label from MapStandardErrors. Should be available in client.resx
         * @param layer  the layer that is affected
         * @param parameters optional parameters if the translation of the errorLabel in client.resx support it.
         */
        ErrorHandler.createErrorEvent = function (errorLabel, layer, parameters) {
            return {
                errorLabel: errorLabel,
                layer: layer,
                parameters: parameters
            };
        };
        /**
         * Use to report when there is error in the Webmap loading.
         * Currently it does only log since the rest of the error handling is done
         * when the error is reported back to require and is handled in the sense code.
         * The logging is only for fault-tracing for support.
         * @param error the error message to display in the log
         */
        ErrorHandler.mapScriptFailed = function (error) {
            console.error(error.message); //
        };
        return ErrorHandler;
    }());
    exports.default = ErrorHandler;
});
//# sourceMappingURL=data:application/json;base64,